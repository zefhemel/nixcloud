#!/usr/bin/python

import os
import sys
NIXCLOUD_ROOT = "%s/../../../../../../" % os.path.realpath(__file__)

import argparse
from subprocess import check_output
import errno

def mkdir_p(path):
  try:
    os.makedirs(path)
  except OSError as exc:
    if exc.errno == errno.EEXIST and os.path.isdir(path):
      pass
    else: raise


extract_path = "%s/extract.nix" % NIXCLOUD_ROOT

parser = argparse.ArgumentParser(description='Deploy NixCloud job.', prog='nixcloud-deploy')
parser.add_argument('user', type=str, help='Username to deploy for')
parser.add_argument('app', type=str, help='App to deploy')
parser.add_argument('--homedir', help='Location of homedir', default="/home/git")

args = parser.parse_args()
user = args.user
app = args.app
homedir = args.homedir

app_path = "%s/app/%s/%s" % (homedir, user, app)

print "Building"
cmd = ["nix-build", "-A", "systemDService", extract_path,
       "--arg", "exprPath", "%s/default.nix" % app_path,
       "--argstr", "user", user,
       "--arg", "env", "{PORT=\"8080\";}"]
output = check_output(cmd)
nix_path = output.rstrip().split("\n")[-1]
print "Done: %s" % nix_path

service_name = "%s-%s.service" % (user, app)
service_dest = "/run/systemd/system/%s" % service_name

print "Creating the user if necessary"
try:
  check_output(["sudo", "useradd", user])
except:
  print "User already existed."
print "Removing old service file (if any)"
check_output(["rm", "-f", service_dest])
print "Symlinking the new one"
check_output(["cp", nix_path, service_dest])
print "Reloading systemd config files"
check_output(["sudo", "systemctl", "--system", "daemon-reload"])
print "Restarting service"
check_output(["sudo", "systemctl", "restart", service_name])

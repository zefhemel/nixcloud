#!/usr/bin/python

import os
import sys
NIXCLOUD_ROOT = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

sys.path.insert(0, NIXCLOUD_ROOT)

from nixcloud.queue import Queue
import argparse
import subprocess
import errno

def mkdir_p(path):
  try:
    os.makedirs(path)
  except OSError as exc:
    if exc.errno == errno.EEXIST and os.path.isdir(path):
      pass
    else: raise


extract_path = "%s/extract.nix" % NIXCLOUD_ROOT

parser = argparse.ArgumentParser(description='Deploy NixCloud job.')
parser.add_argument('user', type=str, help='Username to deploy for')
parser.add_argument('repo', type=str, help='Repository to deploy deploy')
parser.add_argument('--homedir', help='Location of homedir', default="/home")
parser.add_argument('--host', help='Location of homedir', default="host")

args = parser.parse_args()
user = args.user
repo = args.repo
homedir = args.homedir
host = args.host

repo_path = "%s/%s/repo/%s" % (homedir, user, repo)
repo_checkout_path = "%s/%s/checkout" % (homedir, user)

mkdir_p(repo_checkout_path)
os.chdir(repo_checkout_path)
print "Removing old checkout"
subprocess.check_output(["rm", "-rf", repo])
print "Cloning anew: %s" % repo_path
subprocess.check_output(["git", "clone", repo_path], stderr=subprocess.STDOUT)
print "Building"
os.chdir(repo)
cmd = ["nix-build", "-A", "systemDService", extract_path,
       "--arg", "exprPath", "%s/%s/default.nix" % (repo_checkout_path, repo),
       "--argstr", "user", user,
       "--arg", "env", "{PORT=\"8080\";}"]
output = subprocess.check_output(cmd)
nix_path = output.rstrip().split("\n")[-1]
print "Publishing to queue: %s" % nix_path
queue = Queue()
queue.publish("activate", "%s %s %s" % (user, repo, nix_path))
